{"version":3,"sources":["interfaces/UnidirectionalPaymentChannelInterface.js","components/Header/Header.js","components/Overlay/Overlay.js","components/ChannelForm/ChannelForm.js","components/ChannelItem/ChannelItem.js","App/App.js","serviceWorker.js","index.js"],"names":["UnidirectionalPaymentChannelInterface","constant","inputs","name","type","outputs","payable","stateMutability","Header","props","address","react_default","a","createElement","className","Overlay","display","target","href","rel","ChannelForm","openPaymentRecipient","openPaymentAmount","openChannel","handleFormChange","onSubmit","e","preventDefault","placeholder","value","onChange","onClick","ChannelItem","web3","channelContract","channel","channelSpend","closeChannel","userType","verifySignature","paymentAmountEth","initPayment","window","utils","fromWei","deposit","toString","recipient","sender","status","id","disabled","contractAddress","initialState","senderChannels","recipientChannels","App","state","Object","assign","initWeb3","Web3","currentProvider","_this","handleAccountUpdate","loadContractInterface","alert","eth","Contract","contractInterface","setAccount","publicConfigStore","on","args","refreshAccount","_callee","accounts","regenerator_default","wrap","_context","prev","next","getAccounts","sent","abrupt","toLowerCase","setState","getSenderChannels","getRecipientChannels","stop","this","_ref2","selectedAddress","newState","_callee2","contractChannels","_context2","getContractChannels","methods","senderChannelIndex","_callee3","_context3","recipientChannelIndex","_callee4","getChannelCount","getChannelIndex","channels","channelCount","i","channelIndex","_context4","call","push","_callee5","_this$state","_context5","toWei","send","from","then","receipt","_callee6","channelId","_this$state2","amount","previousChannelSpend","message","signature","paymentEntry","_context6","getPreviousChannelSpend","parseInt","constructPaymentMessage","signPaymentMessage","spenderAddress","storePayment","soliditySha3","t","v","_callee7","signedMessage","_context7","personal","sign","localStorage","getItem","storedPayments","JSON","parse","paymentStorage","setItem","stringify","_callee8","storedPayment","expectedMessage","signingAddress","_context8","ecRecover","_callee9","paymentStore","_paymentStore$channel","_context9","field","_this2","_this$state3","components_Header_Header","ChannelForm_ChannelForm","length","map","ChannelItem_ChannelItem","key","components_Overlay_Overlay","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4235c15b.chunk.js","sourcesContent":["export default [{constant:false,inputs:[{name:\"_channelSpend\",type:\"uint256\"},{name:\"_channelId\",type:\"uint256\"},{name:\"_signature\",type:\"bytes\"},{name:\"_sender\",type:\"address\"}],name:\"closeChannel\",outputs:[{name:\"success\",type:\"bool\"}],payable:false,stateMutability:\"nonpayable\",type:\"function\"},{constant:false,inputs:[{name:\"_recipient\",type:\"address\"}],name:\"openChannel\",outputs:[],payable:true,stateMutability:\"payable\",type:\"function\"},{inputs:[],payable:false,stateMutability:\"nonpayable\",type:\"constructor\"},{constant:true,inputs:[],name:\"channelIndex\",outputs:[{name:\"\",type:\"uint256\"}],payable:false,stateMutability:\"view\",type:\"function\"},{constant:true,inputs:[{name:\"\",type:\"uint256\"}],name:\"channels\",outputs:[{name:\"id\",type:\"uint256\"},{name:\"sender\",type:\"address\"},{name:\"recipient\",type:\"address\"},{name:\"deposit\",type:\"uint256\"},{name:\"status\",type:\"uint8\"}],payable:false,stateMutability:\"view\",type:\"function\"},{constant:true,inputs:[{name:\"\",type:\"address\"}],name:\"recipientChannelIndex\",outputs:[{name:\"\",type:\"uint256\"}],payable:false,stateMutability:\"view\",type:\"function\"},{constant:true,inputs:[{name:\"\",type:\"address\"},{name:\"\",type:\"uint256\"}],name:\"recipientChannels\",outputs:[{name:\"\",type:\"uint256\"}],payable:false,stateMutability:\"view\",type:\"function\"},{constant:true,inputs:[{name:\"\",type:\"address\"}],name:\"senderChannelIndex\",outputs:[{name:\"\",type:\"uint256\"}],payable:false,stateMutability:\"view\",type:\"function\"},{constant:true,inputs:[{name:\"\",type:\"address\"},{name:\"\",type:\"uint256\"}],name:\"senderChannels\",outputs:[{name:\"\",type:\"uint256\"}],payable:false,stateMutability:\"view\",type:\"function\"}];\n","import React from 'react';\n\nimport './Header.css';\n\nfunction Header (props) {\n  const { address } = props;\n\n  return (\n    <div className=\"Header\">\n      <h1>++</h1>\n      <p>signed in: { address }</p>\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react';\n\nimport './Overlay.css';\n\nfunction Overlay(props) {\n  const { display } = props;\n\n  return(\n    <div className=\"Overlay\">\n      <div className=\"Overlay__pattern\" />\n        {\n          display === 'signin' &&\n          <div className=\"Overlay__content\">\n            <h3>\n              Please sign into&nbsp;\n              <a\n                target=\"_blank\"\n                href=\"https://metamask.io/\"\n                rel=\"noopener noreferrer\">\n                MetaMask\n              </a>\n            </h3>\n            <h1>psss.. test on rinkeby network</h1>\n          </div>\n        }\n\n        {\n          display === 'busy' &&\n          <div className=\"Overlay__content\">\n            <h3>Blockchaining, please standby..</h3>\n            <h1>Confirm with your metamask wallet</h1>\n          </div>\n        }\n    </div>\n  )\n}\n\nexport default Overlay\n","import React from 'react';\n\nfunction ChannelForm(props) {\n\n  const {\n    openPaymentRecipient,\n    openPaymentAmount,\n    openChannel,\n    handleFormChange\n  } = props;\n\n  return(\n    <form onSubmit={e => e.preventDefault()}>\n      <label>\n        Enter Channel Recipient\n        <input\n          type=\"text\"\n          placeholder=\"recipient address 0x..\"\n          value={openPaymentRecipient}\n          onChange={e => handleFormChange('openPaymentRecipient', e.target.value)} />\n      </label>\n\n      <label>\n        Enter Channel Value\n        <input\n          type=\"text\"\n          placeholder=\"amount in ETH\"\n          value={openPaymentAmount}\n          onChange={e => handleFormChange('openPaymentAmount', e.target.value)} />\n      </label>\n\n      <button className=\"App__button--primary\" onClick={openChannel}>\n        Open Channel\n      </button>\n    </form>\n  )\n}\n\nexport default ChannelForm;\n","import React from 'react'\n\nfunction ChannelItem(props) {\n  const {\n    channel,\n    channelSpend,\n    closeChannel,\n    userType,\n    verifySignature,\n    paymentAmountEth,\n    initPayment\n  } = props;\n\n  const web3 = window.web3;\n\n  return (\n    <div>\n      { web3.utils.fromWei(channelSpend) } &nbsp; | &nbsp;\n      { web3.utils.fromWei(channel.deposit.toString(), 'ether') } ETH &nbsp;\n\n      {\n        userType === 'sender' ?\n        channel.recipient :\n        channel.sender\n      }\n\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n      {\n        channel.status === '1' &&\n        <span>closed</span>\n      }\n\n      {\n        channel.status === '0' &&\n        <span>\n          {\n            userType === 'sender' ?\n            <button\n              className=\"App__button--secondary\"\n              onClick={() => initPayment(channel.id)}>\n              pay { paymentAmountEth } ETH\n            </button>\n            :\n            <button\n              className=\"App__button--secondary\"\n              onClick={() => closeChannel(channel.id)}\n              disabled={channelSpend === 0}>\n              close channel\n            </button>\n          }\n\n          <button\n            className=\"App__button--secondary\"\n            onClick={() => verifySignature(channel.id)}\n            disabled={channelSpend === 0}>\n            verify\n          </button>\n        </span>\n      }\n\n      <br/><br/>\n    </div>\n  )\n}\n\nexport default ChannelItem;\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport contractInterface from '../interfaces/UnidirectionalPaymentChannelInterface';\n\n// import components\nimport Header from '../components/Header/Header';\nimport Overlay from '../components/Overlay/Overlay';\nimport ChannelForm from '../components/ChannelForm/ChannelForm';\nimport ChannelItem from '../components/ChannelItem/ChannelItem';\n\n// import styles\nimport './App.css';\n\n// init global variables\nlet web3;\nlet channelContract;\nconst contractAddress = '0x82293d50e12d580db85d4488f8f3c7f2d5ed8d20';\n\n// define default state\nconst initialState = {\n  address: '',\n  openPaymentRecipient: '',\n  openPaymentAmount: '',\n  senderChannels: [],\n  recipientChannels: [],\n  paymentAmountEth: '0.01',\n  status: 'ready'\n}\n\nclass App extends Component {\n  state = Object.assign({}, initialState);\n\n  componentDidMount() {\n    this.initWeb3();\n  }\n\n  initWeb3 = () => {\n    // check for web3 provider, initialize web3\n    if (typeof window.web3 !== 'undefined') {\n      web3 = new Web3(window.web3.currentProvider);\n      window.web3 = web3;\n\n      this.handleAccountUpdate();\n      this.loadContractInterface();\n    } else {\n      // oh no, web3 not found\n      alert(\n        `\n        Please download metamask extension and sign-in\n        to continue.\n        `\n      );\n    }\n  }\n\n  loadContractInterface = () => {\n    // init contract interface\n    channelContract = new web3.eth.Contract(contractInterface, contractAddress);\n    this.setAccount();\n  }\n\n  handleAccountUpdate = () => {\n    // listen for account changes\n    web3.currentProvider.publicConfigStore\n      .on('update', args => this.refreshAccount(args));\n  }\n\n\n  setAccount = async () => {\n    // get accounts list from web3\n    const accounts = await web3.eth.getAccounts();\n    // if no accounts found => stop\n    if (!accounts[0]) return;\n    // set the active account\n    const address = accounts[0].toLowerCase();\n\n    // update state with new account\n    // get user channels from contract\n    this.setState({ address }, () => {\n      this.getSenderChannels();\n      this.getRecipientChannels();\n    })\n  }\n\n  refreshAccount = ({ selectedAddress }) => {\n    const { address } = this.state;\n    // if address is current => stop\n    if (selectedAddress === address) return;\n\n    // if address has updated, reset state and account\n    const newState = Object.assign({}, initialState);\n    this.setState(newState, () => this.setAccount());\n  }\n\n  getSenderChannels = async () => {\n    const contractChannels = await this.getContractChannels(\n      // sender channel count\n      channelContract.methods.senderChannelIndex,\n      // sender channel indexes, point to main channel mapping\n      channelContract.methods.senderChannels,\n    );\n\n    this.setState({ senderChannels: contractChannels })\n  }\n\n  getRecipientChannels = async () => {\n    const contractChannels = await this.getContractChannels(\n      // recipient channel count\n      channelContract.methods.recipientChannelIndex,\n      // recipient channel indexes, point to main channel mapping\n      channelContract.methods.recipientChannels,\n    );\n\n    this.setState({ recipientChannels: contractChannels })\n  }\n\n  getContractChannels = async (getChannelCount, getChannelIndex) => {\n    const { address } = this.state;\n    const { channels } = channelContract.methods;\n    const contractChannels = []\n\n    // get channel count for sender/recipient\n    const channelCount = await getChannelCount(address).call();\n    if (channelCount < 1) return [];\n\n    for (let i = 0; i < channelCount; i++) {\n      // get channel indexes from sender/recipient mapping\n      let channelIndex = await getChannelIndex(address, i).call();\n      // indexes point to main channel map\n      let channel = await channels(channelIndex).call();\n      contractChannels.push(channel)\n    }\n    return contractChannels;\n  }\n\n  openChannel = async () => {\n    const {\n      openPaymentRecipient,\n      openPaymentAmount,\n      address\n    } = this.state;\n\n    // convert amount to units eth\n    const value = web3.utils.toWei(openPaymentAmount, 'ether');\n    // set ui status 'busy' for blockchain waiting entertainment\n    this.setState({ status: 'busy' });\n\n    // call openChannel contract method\n    channelContract.methods\n      .openChannel(openPaymentRecipient)\n      .send({ from: address, value })\n      .then(receipt => {\n        this.getSenderChannels();\n        this.setState({ status: 'ready' });\n      });\n  }\n\n  initPayment = async channelId => {\n    const { paymentAmountEth, address } = this.state;\n    const amount = web3.utils.toWei(paymentAmountEth, 'ether');\n\n    // get previous spend balance\n    const previousChannelSpend = this.getPreviousChannelSpend(channelId);\n    // add current pay amount and previousSpend\n    const channelSpend = (parseInt(amount) + parseInt(previousChannelSpend)).toString();\n    // hash a message with updated channelSpend and channelId\n    const message = this.constructPaymentMessage(channelSpend, channelId);\n    // sign the hashed message with metamask wallet\n    const signature = await this.signPaymentMessage(message);\n\n    // construct payment entry for localStorage\n    const paymentEntry = {\n      channelId,\n      channelSpend,\n      signature,\n      spenderAddress: address\n    }\n\n    this.storePayment(paymentEntry)\n  }\n\n  constructPaymentMessage = (channelSpend, channelId) => (\n    // hash channelSpend and channelId\n    web3.utils.soliditySha3(\n      { t: 'uint256', v: channelSpend },\n      { t: 'uint256', v: channelId },\n    )\n  )\n\n  signPaymentMessage = async message => {\n    const { address } = this.state;\n    // sign the message hash\n    const signedMessage = await web3.eth.personal.sign(message, address);\n    return signedMessage;\n  }\n\n  getPreviousChannelSpend = channelId => {\n    // if no payment record found => 0\n    if (!localStorage.getItem('payments')) return '0';\n\n    const storedPayments = JSON.parse(localStorage.getItem('payments'));\n    // get channel record from stored payment data\n    const previousSpend = storedPayments[channelId] ? storedPayments[channelId].channelSpend : 0;\n    return previousSpend.toString();\n  }\n\n  storePayment = paymentEntry => {\n    // prep localStorage payments object\n    const paymentStorage = localStorage.getItem('payments') ?\n      Object.assign({}, JSON.parse(localStorage.getItem('payments'))) : {};\n\n    // add new entry to channel\n    paymentStorage[paymentEntry.channelId] = paymentEntry;\n    localStorage.setItem('payments', JSON.stringify(paymentStorage));\n    this.getSenderChannels();\n  }\n\n  verifySignature = async channelId => {\n    // get payment record from localStorage\n    const storedPayment = JSON.parse(localStorage.getItem('payments'))[channelId];\n    const { channelSpend, signature, spenderAddress } = storedPayment;\n\n    // recreate the expected message hash\n    const expectedMessage = this.constructPaymentMessage(channelSpend, channelId);\n    // recover signer's address from expected message hash and the recorded signature\n    const signingAddress = await web3.eth.personal.ecRecover(expectedMessage, signature);\n\n    // compare recovered address with expected signer's address\n    if (signingAddress.toLowerCase() === spenderAddress.toLowerCase()) {\n      return alert('payment signature is valid. Signed by: ' + signingAddress + ' for ' + channelSpend);\n    } else {\n      alert('payment signature invalid');\n    }\n  }\n\n  closeChannel = async channelId => {\n    const { address } = this.state;\n    // get payment record\n    const paymentStore = localStorage.getItem('payments') ?\n      Object.assign({}, JSON.parse(localStorage.getItem('payments'))) : {};\n\n    // no channel data => stop\n    if (!paymentStore[channelId]) return;\n\n    const {\n      channelSpend,\n      signature,\n      spenderAddress\n    } = paymentStore[channelId];\n\n    // set ui state to busy while we wait for on-chain tx\n    this.setState({ status: 'busy' });\n\n    // execute closing function\n    channelContract.methods\n      .closeChannel(channelSpend, channelId, signature, spenderAddress)\n      .send({ from: address })\n      .then(receipt => {\n        this.setState({ status: 'ready' });\n        if (receipt.status === true) {\n          this.getSenderChannels();\n          this.getRecipientChannels();\n        }\n      });\n  }\n\n  handleFormChange = (field, value) => {\n    // update state with form data\n    const newState = {};\n    newState[field] = value;\n    this.setState(newState);\n  }\n\n  render() {\n    const {\n      address,\n      openPaymentRecipient,\n      openPaymentAmount,\n      senderChannels,\n      recipientChannels,\n      paymentAmountEth,\n      status\n    } = this.state;\n\n    return(\n      <div className=\"App\">\n        <Header address={address} />\n        <div className=\"App__container\">\n          <h4>Open payment channel</h4>\n          <ChannelForm\n            openPaymentRecipient={openPaymentRecipient}\n            openPaymentAmount={openPaymentAmount}\n            handleFormChange={this.handleFormChange}\n            openChannel={this.openChannel}\n          />\n\n          <hr/>\n\n          <h4>Sender channels</h4>\n          <form>\n            <label>\n              Enter Payment Amount\n              <input\n                type=\"text\"\n                placeholder=\"amount in ETH\"\n                value={paymentAmountEth}\n                onChange={e => this.setState({ paymentAmountEth: e.target.value })} />\n            </label>\n          </form>\n\n          {\n            senderChannels.length > 0 ?\n            <div>\n              {\n                senderChannels.map(channel => (\n                  <ChannelItem\n                    key={channel.id}\n                    userType=\"sender\"\n                    channel={channel}\n                    channelSpend={this.getPreviousChannelSpend(channel.id)}\n                    initPayment={this.initPayment}\n                    verifySignature={this.verifySignature}\n                    paymentAmountEth={paymentAmountEth}\n                  />\n                ))\n              }\n            </div>\n            :\n            <div> - </div>\n          }\n\n          <hr/>\n\n          <h4>Recieving channels</h4>\n          {\n            recipientChannels.length > 0 ?\n            <div>\n              {\n                recipientChannels.map(channel => (\n                  <ChannelItem\n                    key={channel.id}\n                    userType=\"reciever\"\n                    channel={channel}\n                    channelSpend={this.getPreviousChannelSpend(channel.id)}\n                    closeChannel={this.closeChannel}\n                    verifySignature={this.verifySignature}\n                  />\n                ))\n              }\n            </div>\n            :\n            <div> - </div>\n          }\n        </div>\n\n        {\n          !address &&\n          <Overlay display=\"signin\" />\n        }\n\n        {\n          status === 'busy' &&\n          <Overlay display=\"busy\" />\n        }\n\n      </div>\n    )\n  }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}