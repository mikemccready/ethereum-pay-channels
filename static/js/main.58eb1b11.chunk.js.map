{"version":3,"sources":["App.js","interfaces/UnidirectionalPaymentChannelInterface.js","serviceWorker.js","index.js"],"names":["web3","channelContract","UnidirectionalPaymentChannelInterface","constant","inputs","name","type","outputs","payable","stateMutability","initialState","address","openPaymentRecipient","openPaymentAmount","senderChannels","recipientChannels","paymentAmountEth","status","App","state","Object","assign","this","initWeb3","window","Web3","currentProvider","loadContractInterface","alert","eth","Contract","contractInterface","setAccount","getAccounts","accounts","toLowerCase","setState","_this2","getSenderChannels","getRecipientChannels","publicConfigStore","on","args","refreshAccount","_this3","_ref","selectedAddress","methods","senderChannelIndex","call","channelCount","i","channelIndex","channels","channel","push","recipientChannelIndex","e","preventDefault","value","utils","toWei","openChannel","send","from","then","receipt","_this4","channelId","amount","previousChannelSpend","getPreviousChannelSpend","channelSpend","parseInt","toString","message","constructPaymentMessage","signPaymentMessage","signature","paymentEntry","spenderAddress","storePayment","soliditySha3","t","v","personal","sign","signedMessage","localStorage","getItem","setItem","JSON","stringify","storedPayments","parse","paymentStorage","storedPayment","expectedMessage","ecRecover","signingAddress","paymentStore","closeChannel","_this5","_this6","_this$state3","react_default","a","createElement","className","placeholder","onChange","target","onClick","length","map","key","id","fromWei","deposit","recipient","initPayment","verifySignature","disabled","sender","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58eb1b11.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\n\nimport contractInterface from './interfaces/UnidirectionalPaymentChannelInterface';\nimport './App.css';\n\n// rinkeby network\nconst contractAddress = '0x4b5614a05fe4a1d212d2d66573909342e5648c1c'\nlet web3;\nlet channelContract;\n\nconst initialState = {\n  address: '',\n  openPaymentRecipient: '',\n  openPaymentAmount: '',\n  senderChannels: [],\n  recipientChannels: [],\n  paymentAmountEth: '0.01',\n  status: 'ready'\n}\n\nclass App extends Component {\n  state = Object.assign({}, initialState);\n\n  componentDidMount() {\n    this.initWeb3();\n  }\n\n  initWeb3() {\n    if (typeof window.web3 !== 'undefined') {\n      web3 = new Web3(window.web3.currentProvider);\n      window.web3 = web3;\n      return this.loadContractInterface();\n    } else {\n      alert('no web3')\n    }\n  }\n\n  loadContractInterface() {\n    channelContract = new web3.eth.Contract(\n      contractInterface,\n      contractAddress\n    );\n\n    return this.setAccount();\n  }\n\n  async setAccount() {\n    const accounts = await web3.eth.getAccounts();\n    if (!accounts[0]) return;\n\n    const address = accounts[0].toLowerCase();\n\n    this.setState({ address }, () => {\n      this.getSenderChannels();\n      this.getRecipientChannels();\n\n      web3.currentProvider.publicConfigStore\n        .on('update', args => this.refreshAccount(args));\n    })\n  }\n\n  refreshAccount({ selectedAddress }) {\n    const { address } = this.state;\n\n    if (selectedAddress === address) return;\n\n    const state = Object.assign({}, initialState);\n    this.setState(state, () => this.setAccount());\n  }\n\n  async getSenderChannels() {\n    const { address } = this.state;\n\n    const channelCount = await channelContract.methods\n      .senderChannelIndex(address).call()\n\n    if (channelCount < 1) return;\n\n    // fetch channel data from contract\n    const senderChannels = []\n    for (let i = 0; i < channelCount; i++) {\n      let channelIndex = await channelContract.methods\n        .senderChannels(address, i).call()\n\n      let channel = await channelContract.methods\n        .channels(channelIndex).call()\n\n      senderChannels.push(channel)\n    }\n\n    this.setState({ senderChannels })\n  }\n\n  async getRecipientChannels() {\n    const { address } = this.state;\n    const channelCount = await channelContract.methods\n      .recipientChannelIndex(address).call()\n\n    if (channelCount < 1) return;\n\n    const recipientChannels = []\n    for (let i = 0; i < channelCount; i++) {\n      let channelIndex = await channelContract.methods\n        .recipientChannels(address, i).call()\n\n      // KLUDGE => use pointers inside contract\n      let channel = await channelContract.methods\n        .channels(channelIndex).call()\n\n      recipientChannels.push(channel)\n    }\n\n    this.setState({ recipientChannels })\n  }\n\n  async openChannel(e) {\n    e.preventDefault();\n    const { openPaymentRecipient, openPaymentAmount, address } = this.state;\n    const value = web3.utils.toWei(openPaymentAmount, 'ether');\n\n    this.setState({ status: 'busy' });\n\n    channelContract.methods\n      .openChannel(openPaymentRecipient)\n      .send({ from: address, value })\n      .then(receipt => {\n        this.getSenderChannels();\n        this.setState({ status: 'ready' });\n      });\n  }\n\n  async initPayment(channelId) {\n    const { paymentAmountEth, address } = this.state;\n    const amount = web3.utils.toWei(paymentAmountEth, 'ether');\n    const previousChannelSpend = this.getPreviousChannelSpend(channelId)\n\n    const channelSpend = (\n      parseInt(amount) + parseInt(previousChannelSpend)\n    ).toString();\n\n    const message = this.constructPaymentMessage(channelSpend, channelId);\n    const signature = await this.signPaymentMessage(message);\n\n    const paymentEntry = {\n      channelId,\n      channelSpend,\n      signature,\n      spenderAddress: address\n    }\n\n    this.storePayment(paymentEntry)\n  }\n\n  constructPaymentMessage(channelSpend, channelId) {\n    return web3.utils.soliditySha3(\n      { t: 'uint256', v: channelSpend },\n      { t: 'uint256', v: channelId },\n    )\n  }\n\n  async signPaymentMessage(message) {\n    const { address } = this.state;\n    const signedMessage = await web3.eth.personal.sign(message, address);\n    return signedMessage;\n  }\n\n  getPreviousChannelSpend(channelId) {\n    if (!localStorage.getItem('payments')) {\n      localStorage.setItem('payments', JSON.stringify({}))\n      return 0;\n    }\n\n    const storedPayments = JSON.parse(localStorage.getItem('payments'));\n\n    const previousSpend = storedPayments[channelId] ?\n      storedPayments[channelId].channelSpend : 0;\n\n    return previousSpend.toString();\n  }\n\n  storePayment(paymentEntry) {\n    // update payment object from storage\n    const paymentStorage = localStorage.getItem('payments') ?\n      Object.assign({}, JSON.parse(localStorage.getItem('payments'))) : {};\n\n    paymentStorage[paymentEntry.channelId] = paymentEntry;\n    localStorage.setItem('payments', JSON.stringify(paymentStorage));\n    this.getSenderChannels();\n  }\n\n  async verifySignature(channelId) {\n    const storedPayment = JSON.parse(localStorage.getItem('payments'))[channelId];\n    const { channelSpend, signature, spenderAddress } = storedPayment;\n\n    const expectedMessage = this.constructPaymentMessage(channelSpend, channelId);\n    const signingAddress = await web3.eth.personal.ecRecover(expectedMessage, signature);\n\n    if (signingAddress.toLowerCase() === spenderAddress.toLowerCase())\n      return alert('payment signature is valid. Signed by: ' + signingAddress + ' for ' + channelSpend);\n\n    alert('payment signature invalid')\n  }\n\n  async closeChannel(channelId) {\n    const { address } = this.state;\n\n    const paymentStore = localStorage.getItem('payments') ?\n      Object.assign({}, JSON.parse(localStorage.getItem('payments'))) : {};\n\n    if (!paymentStore[channelId]) return;\n\n    const {\n      channelSpend,\n      signature,\n      spenderAddress\n    } = paymentStore[channelId];\n\n    this.setState({ status: 'busy' });\n\n    channelContract.methods\n      .closeChannel(channelSpend, channelId, signature, spenderAddress)\n      .send({ from: address })\n      .then(receipt => {\n        this.setState({ status: 'ready' });\n        if (receipt.status === true) {\n          this.getSenderChannels();\n          this.getRecipientChannels();\n        }\n      });\n  }\n\n  render() {\n    const {\n      address,\n      openPaymentRecipient,\n      openPaymentAmount,\n      senderChannels,\n      recipientChannels,\n      paymentAmountEth,\n      status\n    } = this.state;\n\n    return(\n      <div className=\"App\">\n\n        {\n          !address &&\n          <div className=\"App__overlay\">\n            <h3>Please sign into MetaMask</h3>\n            <h1>psss.. test on rinkeby network</h1>\n          </div>\n        }\n\n        {\n          status === 'busy' &&\n          <div className=\"App__overlay\">\n            <h3>Blockchaining, please wait..</h3>\n            <h1>this is why we need channels XD</h1>\n            <h3>Please confirm with your metamask wallet</h3>\n          </div>\n        }\n\n        <div className=\"App__header\">\n          <h1>++</h1>\n          <p>signed in: { address }</p>\n        </div>\n\n        <div className=\"App__container\">\n          <h4>Open payment channel</h4>\n          <form>\n            <label>\n              Enter Channel Recipient\n              <input\n                type=\"text\"\n                placeholder=\"recipient address 0x..\"\n                value={openPaymentRecipient}\n                onChange={e => this.setState({ openPaymentRecipient: e.target.value })} />\n            </label>\n\n            <label>\n              Enter Channel Value\n              <input\n                type=\"text\"\n                placeholder=\"amount in ETH\"\n                value={openPaymentAmount}\n                onChange={e => this.setState({ openPaymentAmount: e.target.value })} />\n            </label>\n\n            <button className=\"App__button--primary\" onClick={e => this.openChannel(e)}>\n              Open Channel\n            </button>\n          </form>\n\n          <br/>\n          <hr/>\n\n          <h4>Sender channels</h4>\n          <form>\n            <label>\n              Enter Payment Amount\n              <input\n                type=\"text\"\n                placeholder=\"amount in ETH\"\n                value={paymentAmountEth}\n                onChange={e => this.setState({ paymentAmountEth: e.target.value })} />\n            </label>\n          </form>\n\n          <br/>\n\n          {\n            senderChannels.length > 0 &&\n            <div>\n              {\n                senderChannels.map(channel => (\n                  <div key={channel.id}>\n                    { web3.utils.fromWei(this.getPreviousChannelSpend(channel.id).toString()) } &nbsp; | &nbsp;\n                    { web3.utils.fromWei(channel.deposit.toString(), 'ether') } ETH &nbsp;\n                    {channel.recipient} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                    {\n                      channel.status === 'closed' &&\n                      <span>closed</span>\n                    }\n\n                    {\n                      channel.status === 'open' &&\n                      <span>\n                        <button\n                          className=\"App__button--secondary\"\n                          onClick={() => this.initPayment(channel.id)}>\n                          pay { paymentAmountEth } ETH\n                        </button>\n                        <button\n                          className=\"App__button--secondary\"\n                          onClick={() => this.verifySignature(channel.id)}\n                          disabled={this.getPreviousChannelSpend(channel.id) === 0}>\n                          verify\n                        </button>\n                      </span>\n                    }\n\n                    <br/><br/>\n\n                  </div>\n                ))\n              }\n            </div>\n          }\n          {\n            !senderChannels.length &&\n            <div>\n              -\n            </div>\n          }\n\n          <br/>\n          <hr/>\n\n          <h4>Recieving channels</h4>\n          {\n            recipientChannels.length > 0 &&\n            <div>\n              {\n                recipientChannels.map(channel => (\n                  <div key={channel.id}>\n                    { web3.utils.fromWei(this.getPreviousChannelSpend(channel.id).toString()) } &nbsp; | &nbsp;\n                    { web3.utils.fromWei(channel.deposit.toString(), 'ether') } ETH &nbsp;\n                    {channel.sender} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                    {\n                      channel.status === 'closed' &&\n                      <span>closed</span>\n                    }\n\n                    {\n                      channel.status === 'open' &&\n                      <span>\n                        <button\n                          className=\"App__button--secondary\"\n                          onClick={() => this.verifySignature(channel.id)}\n                          disabled={this.getPreviousChannelSpend(channel.id) === 0}>\n                          verify\n                        </button>\n\n                        <button\n                          className=\"App__button--secondary\"\n                          onClick={() => this.closeChannel(channel.id)}\n                          disabled={this.getPreviousChannelSpend(channel.id) === 0}>\n                          close channel\n                        </button>\n                      </span>\n                    }\n\n                    <br/><br/>\n\n                  </div>\n                ))\n              }\n            </div>\n          }\n          {\n            !recipientChannels.length &&\n            <div>\n              -\n            </div>\n          }\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App\n","export default [\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"_recipient\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"openChannel\",\n\t\t\"outputs\": [],\n\t\t\"payable\": true,\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"channelIndex\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"recipientChannelIndex\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"recipientChannels\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"senderChannelIndex\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"senderChannels\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"_channelSpend\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"_channelId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"_signature\",\n\t\t\t\t\"type\": \"bytes\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"_sender\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"closeChannel\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"success\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"channels\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"id\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"sender\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"recipient\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"deposit\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"status\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t}\n]\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}